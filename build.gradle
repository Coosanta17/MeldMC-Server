import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'root'
    id 'xyz.wagyourtail.unimined' version '1.4.1-SNAPSHOT' apply false
    id 'xyz.wagyourtail.jvmdowngrader' version '1.3.0'
    id 'xyz.wagyourtail.manifold' version '1.0.0-SNAPSHOT'
    id 'io.github.pacifistmc.forgix' version '2.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

configurations {
    shade
    implementation.extendsFrom shade
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        shade
        implementation.extendsFrom shade
    }

    dependencies {
        shade 'org.yaml:snakeyaml:2.5'

        shade 'org.bouncycastle:bcprov-jdk18on:1.81'
        shade 'org.bouncycastle:bcpkix-jdk18on:1.81'

        shade 'com.fasterxml.jackson.dataformat:jackson-dataformat-toml:2.20.0'
        shade 'com.fasterxml.jackson.core:jackson-databind:2.20.0'
        shade 'com.fasterxml.jackson.core:jackson-core:2.20.0'
    }

    shadowJar {
        archiveClassifier = 'shadow'
        configurations = [project.configurations.shade]
        mergeServiceFiles()
    }
}

def buildsForRaw = (gradle.hasProperty('builds_for') ? (String) gradle.builds_for : '')
def buildsFor = buildsForRaw.tokenize(',').collect { it.trim() }.findAll { it }
def hasNeoForge = buildsFor.contains('neoforge')

forgix {
    destinationDirectory = layout.projectDirectory.dir("build/forgix")

    fabric()
    forge()
    if (hasNeoForge) {
        neoforge()
    }

    autoRun = true
}
