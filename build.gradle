plugins {
    id 'root'
    id 'xyz.wagyourtail.unimined' version '1.4.1-SNAPSHOT' apply false
    id 'xyz.wagyourtail.jvmdowngrader' version '1.3.0'
    id 'xyz.wagyourtail.manifold' version '1.0.0-SNAPSHOT'
    id 'io.github.pacifistmc.forgix' version '2.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

def currentJava = JavaVersion.current()
def allowJava21 = false
if (gradle.hasProperty('mcVer')) {
    try {
        def mc = gradle.mcVer.toString()
        def parts = mc.tokenize('\\.')
        int major = parts.size() > 0 ? parts[0].toInteger() : 0
        int minor = parts.size() > 1 ? parts[1].toInteger() : 0
        int patch = parts.size() > 2 ? parts[2].toInteger() : 0
        int vInt = major * 10000 + minor * 100 + patch
        int minInt = 1 * 10000 + 20 * 100 + 5
        allowJava21 = vInt >= minInt
    } catch (Exception definatelyNotIgnoredAndShouldMostDefinatelyBeThrown) {
        throw new GradleException("Comparing versions fucking failed!!!!!!", definatelyNotIgnoredAndShouldMostDefinatelyBeThrown)
    }
}

if (!(currentJava == JavaVersion.VERSION_17 || (currentJava == JavaVersion.VERSION_21 && allowJava21))) {
    throw new GradleException("JDK 17 is required. Current version: ${currentJava}")
}

allprojects {
    configurations {
        shade
        implementation.extendsFrom shade
    }

    dependencies {
        shade 'org.yaml:snakeyaml:2.5'

        shade 'org.bouncycastle:bcprov-jdk18on:1.81'
        shade 'org.bouncycastle:bcpkix-jdk18on:1.81'

        shade 'com.fasterxml.jackson.dataformat:jackson-dataformat-toml:2.20.0'
        shade 'com.fasterxml.jackson.core:jackson-databind:2.20.0'
        shade 'com.fasterxml.jackson.core:jackson-core:2.20.0'
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    tasks.withType(JavaCompile).configureEach {
        options.release = 17
    }
}

subprojects {
    apply plugin: 'java-library'
}

def buildsForRaw = (gradle.hasProperty('builds_for') ? (String) gradle.builds_for : '')
def buildsFor = buildsForRaw.tokenize(',').collect { it.trim() }.findAll { it }
def hasNeoForge = buildsFor.contains('neoforge')

forgix {
    destinationDirectory = layout.projectDirectory.dir("build/forgix")
    archiveClassifier = "all-platforms"

    fabric()
    forge()
    if (hasNeoForge) {
        neoforge()
    }

    autoRun = true
}

shadowJar {
    relocate 'org.yaml', 'net.coosanta.meldmc.relocated.org.yaml'
    relocate 'org.bouncycastle', 'net.coosanta.meldmc.relocated.org.bouncycastle'
    relocate 'com.fasterxml.jackson', 'net.coosanta.meldmc.relocated.com.fasterxml.jackson'

    from(layout.buildDirectory.file("forgix/meldmc-${mod_version}-${mc_ver}-all-platforms.jar"))
    configurations = [project.configurations.shade]
    archiveClassifier.set('all-platforms-shaded')
}
