import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'root'
    id 'xyz.wagyourtail.unimined' version '1.4.1-SNAPSHOT' apply false
    id 'xyz.wagyourtail.jvmdowngrader' version '1.3.0'
    id 'xyz.wagyourtail.manifold' version '1.0.0-SNAPSHOT'
    id 'io.github.pacifistmc.forgix' version '2.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        shade // I recommend using "addJar" instead of "shade"
        implementation.extendsFrom shade
    }

    dependencies {
        shade 'org.yaml:snakeyaml:2.5'

        shade 'org.bouncycastle:bcprov-jdk18on:1.81'
        shade 'org.bouncycastle:bcpkix-jdk18on:1.81'

        shade 'com.fasterxml.jackson.dataformat:jackson-dataformat-toml:2.20.0'
        shade 'com.fasterxml.jackson.core:jackson-databind:2.20.0'
        shade 'com.fasterxml.jackson.core:jackson-core:2.20.0'
    }

    shadowJar {
        exclude 'META-INF/versions/**' // <-- This is very important!!!!! (ASM panics when it sees JDK-18+ class files)

        archiveClassifier = 'shadow'
        configurations = [project.configurations.shade]

        relocate 'org.bouncycastle', "${project.group}.relocated.org.bouncycastle"
        relocate 'com.fasterxml.jackson', "${project.group}.relocated.com.fasterxml.jackson"
        relocate 'org.yaml', "${project.group}.relocated.org.yaml"
    }

    assemble.dependsOn shadowJar
}

forgix {
    destinationDirectory = layout.projectDirectory.dir("build/forgix")

    forge {
        inputJar.set(
                project(":forge")
                        .tasks
                        .named("shadowJar", ShadowJar)
                        .flatMap { it.archiveFile } as Provider<? extends RegularFile>
        )
    }
    fabric {
        inputJar.set(
                project(":fabric")
                        .tasks
                        .named("shadowJar", ShadowJar)
                        .flatMap { it.archiveFile } as Provider<? extends RegularFile>
        )
    }
    neoforge {
        inputJar.set(
                project(":neoforge")
                        .tasks
                        .named("shadowJar", ShadowJar)
                        .flatMap { it.archiveFile } as Provider<? extends RegularFile>
        )
    }

    autoRun = true
}

